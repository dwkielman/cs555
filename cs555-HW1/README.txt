README
======

CS555 - Intro to Distributed Systems
Homework 1: Building a Distributed, Replicated, and Fault Tolerant File System: Contrasting Replication and Erasure Coding
Daniel Kielman
daniel.kielman@colostate.edu

Included Files
--------------

All source Java files have been included for runing the program. The files have been divided amongst the following packages:
|--cs555/erasure/node
|--cs555/erasure/transport
|--cs555/erasure/util
|--cs555/erasure/wireformats
|--cs555/replication/node
|--cs555/replication/transport
|--cs555/replication/util
|--cs555/replication/wireformats
gradle.build
README.txt
libs/reed-solomon-erasure-coding.jar
Daniel-Kielman-CS555-HW1-Contrast of Erasure Coding and Replication Based Schemes.pdf

To compile this Program
-----------------------

This project has been set with Gradle to include the reed-solomon-erasure-coding.jar file. 

The reed-solomon-erasure-coding.jar file has been included in a separate directory titled lib.

The Gradle file has been included in this package for reference to those changes.

Place the src folder in the same location as the build.gradle file and enter the following command:

	gradle build

If you need to re-compile, enter the following command and then build again:

	gradle clean

Before running the Program
--------------------------
Files that you wish to send from a Client to be distributed amongst Chunk Servers are easiest when placed in the home directory.

When looking for local files generated by Chunk Servers they will be stored in the machine's local directory at:
	/tmp/stored_dkielman/

Reconstructed files by the Client will be stored in the machine's local directory at:
	/tmp/received_dkielman/

Running the Program
-------------------
The following run commands can be entered after a succesful build of the application from build/classes/java/main directory.

|--For running the Replication Scheme:
To run the Controller, enter the following:
	java cs555.replication.node.Controller <portnum>
example:
	java cs555.replication.node.Controller 5002

To run a Chunk Server, enter the following (minimum 3 required to run):
	java cs555.replication.node.Controller <controller-host> <controller-portnum>
example:
	java cs555.replication.node.ChunkServer olympia 5002 

To run a Client, enter the following:
	java cs555.replication.node.Client <controller-host> <controller-portnum>
example:
	java cs555.replication.node.Client olympia 5002

|--For running the Erasure Scheme:
To run the Controller, enter the following:
	java cs555.erasure.node.Controller <portnum>
example:
	java cs555.erasure.node.Controller 5002

To run a Chunk Server, enter the following (minimum 9 required to run):
	java cs555.erasure.node.Controller <controller-host> <controller-portnum>
example:
	java cs555.erasure.node.ChunkServer olympia 5002 

To run a Client, enter the following:
	java cs555.erasure.node.Client <controller-host> <controller-portnum>
example:
	java cs555.erasure.node.Client olympia 5002

|--Client Commands
In the Client console, the following commands can be entered for running the program:
To store a file enter: s
Then type the name of the file (with directory) that you wish to store: /path/to/<filename>
example:
	/s/chopin/k/grad/dkielman/testFile.jpg

To read a stored file enter: r
Then type the name of the file (with directory) that you wish to read: /path/to/<filename>
example:
	/s/chopin/k/grad/dkielman/testFile.jpg

To quite the program enter: q